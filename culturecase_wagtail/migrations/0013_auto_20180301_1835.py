# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-03-01 18:35
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.wagtailroutablepage.models


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailforms', '0003_capitalizeverbose'),
        ('wagtailredirects', '0005_capitalizeverbose'),
        ('wagtailcore', '0040_page_draft_title'),
        ('culturecase_wagtail', '0012_articlesummarypage_categories'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategorisedSummariesPage',
            fields=[
                ('richpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='culturecase_wagtail.RichPage')),
            ],
            options={
                'abstract': False,
            },
            bases=('culturecase_wagtail.richpage',),
        ),
        migrations.CreateModel(
            name='ResearchSummariesTree',
            fields=[
                ('richpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='culturecase_wagtail.RichPage')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.wagtailroutablepage.models.RoutablePageMixin, 'culturecase_wagtail.richpage'),
        ),
        migrations.CreateModel(
            name='ResearchSummary',
            fields=[
                ('richpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='culturecase_wagtail.RichPage')),
                ('article_title', models.CharField(blank=True, default=None, help_text='The title of the research paper', max_length=255, null=True, verbose_name='Article title')),
                ('article_authors', models.CharField(blank=True, default=None, help_text='The names of one or more authors separated by commas', max_length=255, null=True, verbose_name='Article authors')),
                ('article_year', models.IntegerField(blank=True, default=None, help_text='Year of publication', null=True, verbose_name='Article year')),
                ('article_source', models.CharField(blank=True, default=None, help_text='Source reference', max_length=255, null=True, verbose_name='Article source')),
                ('article_url', models.URLField(blank=True, default=None, help_text='Reference URL (including the http:// part)', null=True, verbose_name='Article link')),
                ('article_oaurl', models.URLField(blank=True, default=None, help_text='Open access URL (including the http:// part)', null=True, verbose_name='Article open access link')),
                ('article_email', models.EmailField(blank=True, default=None, help_text='Contact email address for the lead author', max_length=254, null=True, verbose_name='Author email')),
            ],
            options={
                'abstract': False,
            },
            bases=('culturecase_wagtail.richpage',),
        ),
        migrations.CreateModel(
            name='ResearchSummaryResearchTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='research_tags', to='culturecase_wagtail.ResearchSummary')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='culturecase_wagtail_researchsummaryresearchtag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StaticPage',
            fields=[
                ('richpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='culturecase_wagtail.RichPage')),
            ],
            options={
                'abstract': False,
            },
            bases=('culturecase_wagtail.richpage',),
        ),
        migrations.RenameModel(
            old_name='ResearchCategoryHomePage',
            new_name='ResearchCategoriesTree',
        ),
        migrations.RenameModel(
            old_name='ResearchCategoryPage',
            new_name='ResearchCategory',
        ),
        migrations.RemoveField(
            model_name='articlesummarypage',
            name='categories',
        ),
        migrations.RemoveField(
            model_name='articlesummarypage',
            name='richpage_ptr',
        ),
        migrations.RemoveField(
            model_name='articlesummarypage',
            name='tags',
        ),
        migrations.RemoveField(
            model_name='articlesummarypageresearchtag',
            name='content_object',
        ),
        migrations.RemoveField(
            model_name='articlesummarypageresearchtag',
            name='tag',
        ),
        migrations.RemoveField(
            model_name='researchpage',
            name='richpage_ptr',
        ),
        migrations.DeleteModel(
            name='ArticleSummaryPage',
        ),
        migrations.DeleteModel(
            name='ArticleSummaryPageResearchTag',
        ),
        migrations.DeleteModel(
            name='ResearchPage',
        ),
        migrations.AddField(
            model_name='researchsummary',
            name='categories',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, to='culturecase_wagtail.ResearchCategory'),
        ),
        migrations.AddField(
            model_name='researchsummary',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='culturecase_wagtail.ResearchSummaryResearchTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
